#!/bin/bash

## This is the script jenkins should run to provision a device in the lab

set -e
DEVICEID=$2
BASEDIR=$(dirname $(readlink -f $0))
export PATH=${BASEDIR}/../utils/host:${PATH}
RECOVERY_URL="http://people.canonical.com/~alan/touch"

NETWORK_FILE="${NETWORK_FILE-${HOME}/.ubuntu-ci/wifi.conf}"
echo $NETWORK_FILE
#IMAGE_OPT="${IMAGE_OPT---bootstrap --developer-mode --channel ubuntu-touch/devel-proposed/ubuntu}"
UUID="${UUID-$(uuidgen -r)}"
PHABLET_PASSWORD="${PHABLET_PASSWORD-0000}"
SKIP_CLICK="Y"

usage() {
cat <<EOF
usage: $0 [-s ANDROID_SERIAL] [-c CHANNEL_NAME] [-n NETWORK_FILE] [-P ppa] [-p package] [-r revision] [-w]

Provisions the given device with the latest build

OPTIONS:
  -h    Show this message
  -c    Channel name (default ubuntu-touch/stable/ubuntu)
  -s    Specify the serial of the device to install
  -n    Select network file
  -P    add the ppa to the target (can be repeated)
  -D    add a debian package dir to the target (can be repeated)
  -p    add the package to the target (can be repeated)
  -r    Specify the image revision to flash
  -w    make the system writeable (implied with -p and -P arguments)

EOF
}

log() {
    echo $*
}

#### remove if not needed
set_hwclock() {
    log "SETTING HWCLOCK TO CURRENT TIME"
        # Use ip for ntp.ubuntu.com in case resolving doesn't work yet
    ./adb-shell sudo ntpdate 91.189.94.4 || log "WARNING: could not set ntpdate"
    # hwclock sync has to happen after we set writable image
    ./adb-shell sudo hwclock -w || log "WARNING: could not sync hwclock"
    log "Current date on device is:"
    adb shell date
    log "Current hwclock on device is:"
    adb shell sudo hwclock
}

retry() {
    timeout=$1
    shift
    loops=$1
    shift
    cmd=$*
    loopcnt=0
    while true; do
        $cmd && break || {
            if [ $loopcnt -lt $loops ] ; then
                loopcnt=$[$loopcnt+1]
                echo "Retry [$loopcnt/$loops] after $timeout seconds..."
                sleep $timeout
            else
                echo Failed on \'$cmd\' after $loops retries
                exit 1
            fi
        }
    done
}

reboot_bootloader() {
    # In CI, we've seen cases where 'adb reboot bootloader' will just
    # reboot the device and not enter the bootloader. Adding another
    # reboot and retrying was found to be a successful workaround:
    # https://bugs.launchpad.net/ubuntu/+source/android-tools/+bug/1359488
    #
    # We only want to do this if we know ANDROID_SERIAL. Attempting
    # to guess might end up flashing the wrong device.

    log "Attempting adb reboot bootloader"
    adb reboot bootloader
    if [ -n "${ANDROID_SERIAL}" ] ; then
        # Entering the bootloader should take < 10 seconds, add some
        # padding for device variance.
        while true; do
            sleep 30
            if ! fastboot devices | grep -q "${ANDROID_SERIAL}"; then
                log "Device not in fastboot after `adb reboot bootloader`"
                # XXX psivaa: 20150910: No point in continuing
                # if `adb reboot bootloader` fails,
                # which appears to cause issues during testing.
                # This fix is to improve from
                # `adb reboot && return 1` to carry out infinite
                # `adb reboot bootloader`
                adb reboot bootloader
            else
                log "=========== Device in fastboot =========="
                break
            fi
       done
    fi
    return 0
}

download_recovery () {
    # FIXME: ev mentioned on irc that we should add some cheksum for
    # those images -- vila 2015-02-20
        wget -nv -P recovery ${RECOVERY_URL}/recovery-${DEVICE_TYPE}.img
        if [ -f recovery/recovery-${DEVICE_TYPE}.img ]; then
                RECOVERY="--recovery-image=recovery/recovery-${DEVICE_TYPE}.img"
                return 0
        fi
        return 1
}

full_flash() {
    IMAGE_OPT="${IMAGE_OPT---bootstrap --developer-mode --channel $CHANNEL_NAME}"
    log "FLASHING DEVICE"
    DEVICE_TYPE=$(./get-device-type)
    reboot_bootloader
    RECOVERY=""
    # We need to distinguish between devices with no recovery images and
    # failures to download existing recovery images. Only krillin
        # and arale have a recovery image for now.
    if [ "${DEVICE_TYPE}" == 'krillin' ] ||
       [ "${DEVICE_TYPE}" == 'arale' ]; then
        mkdir -p recovery
        retry 10 3 download_recovery
    fi
    # Use a 10 second retry loop for ubuntu-device-flash.
    # Most failures appear to be transient and work with an immediate
    # retry.
    retry 10 3 timeout 1800 ubuntu-device-flash ${IMAGE_SERVER} ${REVISION} touch ${RECOVERY} --password $PHABLET_PASSWORD $IMAGE_OPT
    echo $?
    # If the flashed image fails to install and reboots, wait-for-device
    # will timeout
    timeout 600 adb wait-for-device
    echo $?
    sleep 60  #give the system a little time
}

while getopts i:c:s:n:P:D:p:r:wh opt; do
    case $opt in
    h)
        usage
        exit 0
        ;;
    n)
        NETWORK_FILE=$OPTARG
        ;;
    c)
        CHANNEL_NAME=$OPTARG
        ;;
    s)
        export ANDROID_SERIAL=$OPTARG
        ;;
    i)
        IMAGE_TYPE=$OPTARG
        ;;
    w)
        # making this a non-zero length string enables the logic
        CUSTOMIZE=" "
        ;;
    P)
        CUSTOMIZE="$CUSTOMIZE --ppa $OPTARG"
        ;;
    D)
        CUSTOMIZE="$CUSTOMIZE --package-dir $OPTARG"
        ;;
    p)
        CUSTOMIZE="$CUSTOMIZE -p $OPTARG"
        ;;
    r)
        REVISION="--revision=$OPTARG"
        ;;

    esac
done

if [ -z $CHANNEL_NAME ] ; then
  # Set default channel
  CHANNEL_NAME="ubuntu-touch/stable/ubuntu"
fi

if [ -z $ANDROID_SERIAL ] ; then
    # ensure we only have one device attached
    lines=$(adb devices | wc -l)
    if [ $lines -gt 3 ] ; then
        echo "ERROR: More than one device attached, please use -s option"
        echo
        usage
        exit 1
    fi
fi

if [ ! -f $NETWORK_FILE ] ; then
    echo "ERROR: NETWORK_FILE, $NETWORK_FILE, not found"
    exit 1
fi

full_flash

log "SETTING UP WIFI"
retry 60 5 ./adb-shell 'sudo -iu phablet env |grep UPSTART_SESSION=unix'
retry 60 5 phablet-network -n $NETWORK_FILE

log "DISABLE WELCOME WIZARD"
phablet-config welcome-wizard --disable

log "MAKE IMAGE WRITABLE"
phablet-config writable-image -r ${PHABLET_PASSWORD} $CUSTOMIZE

log "SETTING UP SUDO"
adb -s $DEVICEID shell "echo ${PHABLET_PASSWORD} |sudo -S bash -c 'echo phablet ALL=\(ALL\) NOPASSWD: ALL > /etc/sudoers.d/phablet && chmod 600 /etc/sudoers.d/phablet'"

# FIXME: Can't do this through phablet-config for now because it needs auth
#phablet-config edges-intro --disable

adb -s $DEVICEID  shell "sudo dbus-send --system --print-reply --dest=org.freedesktop.Accounts /org/freedesktop/Accounts/User32011 org.freedesktop.DBus.Properties.Set string:com.canonical.unity.AccountsService string:demo-edges variant:boolean:false"

# get our target-based utilities into our PATH
# adb push ${BASEDIR}/../utils/target /home/phablet/bin

#set_hwclock

./unlock-device
adb -s $DEVICEID shell sudo stop powerd
adb -s $DEVICEID shell powerd-cli display on &
adb -s $DEVICEID shell gsettings set com.ubuntu.touch.system activity-timeout 0

# remove all pre-installed click packages
# The tr in the bit below has a tab in the first pair of quotes!
#adb -s $DEVICEID shell click list |  tr "	" " " | while read line
adb -s $DEVICEID shell click list |  cut -f1 -d"	" | while read line
do
  REMOVECLICK="adb -s $DEVICEID shell sudo click unregister $line"
  echo "$REMOVECLICK"
  $REMOVECLICK
done

# Refresh Unity (equiv of pull down refresh)
adb -s $DEVICEID shell dbus-send /com/canonical/unity/scopes com.canonical.unity.scopes.InvalidateResults string:clickscope
