#!/bin/bash
# Get click and test it
# $1 is click url
# $2 is device serial number
# $3 is device type (mako/flo/arale/krillin)
# $4 is orientation (portrait or landscape)
# $5 is temporary directory
# $6 is the hostname of the server
# $7 is the friendly name of the device "Nexus 4 Portrait"
# e.g. ./runtest /click/20151126103906-PLBRWIBL9X 0050aba613958223 mako portait /tmp/foo marvin.popey.com Nexus_4_Portrait
# rc2 = Click package contains errors, please see log
# rc6 = Click package couldn't be pushed to device
# rc7 = Click package couldn't be installed
# rc8 = Click review aborted
# rc10 = Incorrect number of parameters passed to test script

if [[ "$#" -ne 7 ]]; then
    echo "Insufficient parameters passed to runtest script"
    exit 10
fi

CLICK_URL=$1
DEVICEID=$2
DEVICE_TYPE=$3
ORIENTATION=$4
RESULTSDIR=$5
SERVERHOST=$6
FRIENDLYNAME=$(echo $7 | tr " " "_")
TMPDIR=$(mktemp -d)
TARGETUSER="phablet"
TARGET="/home/$TARGETUSER"
HERE=$(pwd)

function dedupe {
  # This needs to be more robust. Images rarely pass this.
  echo $(date +%Y-%m-%d-%H%M%S) "Comparing $1 and $2"
  diff $1 $2
  if [ "$?" == "0" ]
  then
    echo $(date +%Y-%m-%d-%H%M%S) "Same, deleting $2"
    rm $2
  fi
}

function pause {
    echo $(date +%Y-%m-%d-%H%M%S) "Waiting $1"
    sleep $1
}

function screen_grab {
  case "$DEVICE_TYPE" in
    flo)
        SIZE=1200x1920
        ;;
    maguro)
        SIZE=720x1280
        ;;
    mako)
        SIZE=768x1280
        ;;
    manta)
        SIZE=1600x2560
        ;;
    k95v2)
        SIZE=1152x1920
        ;;
    arale)
        SIZE=1152x1920
        ;;
    grouper)
        SIZE=800x1280
        ;;
    *)
  esac
  CONVERTOPTS="$CONVERTOPTS"
#  adb -s $DEVICEID shell "kill -SIGSTOP \$(pidof unity8)"
  # FIXME: Need to put some smarts around this as it sometimes wedges the phone
  # try not suspending unity8 to see if that helps
  echo $(date +%Y-%m-%d-%H%M%S) "Grabbing screenshot"
  adb -s $DEVICEID shell mirscreencast -m /var/run/mir_socket -n1 2>&1 | tee -a $RESULTSDIR/screenshots.txt
  SCREENSHOTSTATUS=$(grep ^Failed $RESULTSDIR/screenshots.txt)
  # If we failed to take a screenshot for some unknown reason
  if [ -n "${SCREENSHOTSTATUS}" ]; then
    echo $(date +%Y-%m-%d-%H%M%S) "Taking screenshot failed of $FILE failed, errors found"
    exit 1
  fi
#  adb -s $DEVICEID shell "kill -SIGCONT \$(pidof unity8)"
  SILLYFILE=`/usr/bin/adb -s $DEVICEID shell ls -1 /tmp/mir_screencast*|tr -d '\r'`
  if [ "$ORIENTATION" == "landscape" ]; then
    ROTATEOPT="-rotate -90"
  else
    ROTATEOPT="-rotate 0"
  fi
  adb -s $DEVICEID pull "$SILLYFILE" $RESULTSDIR/screenshot.rgba
  convert $ROTATEOPT -depth 8 -size $SIZE $RESULTSDIR/screenshot.rgba $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-$1.png
  exiftool -all= -overwrite_original $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-$1.png
  rm $RESULTSDIR/screenshot.rgba
}

function get_logs {
  # Get data about the version of ubuntu on the device
  adb -s $DEVICEID shell "system-image-cli --info" > $RESULTSDIR/device-version.txt
  # Get the application log
  adb -s $DEVICEID pull $TARGET/.cache/upstart/application-click-$LAUNCH.log $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-application-log.txt
  # Get kernel output associated with the app
  adb -s $DEVICEID shell "sudo dmesg -T | grep $LAUNCH" > $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-dmesg.txt
}

echo $(date +%Y-%m-%d-%H%M%S) $CLICK_URL
echo $(date +%Y-%m-%d-%H%M%S) $DEVICEID

mkdir $RESULTSDIR

wget -P $TMPDIR --content-disposition $SERVERHOST$CLICK_URL

FILE=$(ls $TMPDIR/*.click)
FILENAME=$(basename $FILE)
DESKTOPFILE=$(echo $FILENAME | tr '-' '_')

click-review $FILE > $RESULTSDIR/click-review.txt 2>&1
REVIEWSTATUS=${PIPESTATUS[0]}

# Workaround until bug http://pad.lv/1523255 is fixed
CONTAINS_ERRORS=$(grep ^Errors $RESULTSDIR/click-review.txt)
CONTAINS_WARNINGS=$(grep ^Warnings $RESULTSDIR/click-review.txt)

# If errors in the click-review output
if [ -n "${CONTAINS_ERRORS}" ]; then
  echo $(date +%Y-%m-%d-%H%M%S) "Click review of $FILE failed, errors found"
  exit 2
fi

# If warnings were issued, we continue
if [ -n "${CONTAINS_WARNINGS}" ]; then
  echo $(date +%Y-%m-%d-%H%M%S) "Click review of $FILE generated warnings, running anyway"
fi

# If click-review exited abnormally, but there's no warnings then as we already
# exit 2 on error, this must be an abort, so we exit 8
if [ "$REVIEWSTATUS" != "0" ] && [ -z "${CONTAINS_WARNINGS}" ]; then
  echo $(date +%Y-%m-%d-%H%M%S) "Click review failed to run"
  exit 8
else
  # Either we exited click-review okay, or we just have warnins.
  # Check for device before we do this. It fails a lot.
  echo $(date +%Y-%m-%d-%H%M%S) Waiting for $DEVICEID before sending $FILE to $TARGET
  timeout 600 adb -s $DEVICEID wait-for-device
  # We later determine if APPTYPE is scope or app (or other maybe later)
  APPTYPE="unknown"
  # Send the click package to the device
  echo $(date +%Y-%m-%d-%H%M%S) Pushing $FILE to $TARGET
  adb -s $DEVICEID push $FILE $TARGET
  if [ "$?" != "0" ]; then
      echo $(date +%Y-%m-%d-%H%M%S) "Push $FILE failed"
      echo "There was a problem pushing $FILE to $DEVICE_TYPE on $HOSTNAME at $(date +%Y-%m-%d-%H%M%S). Please try again later." >> $RESULTSDIR/errors.txt
      # attempt basic remedial measure of rebooting device
      adb -s $DEVICEID reboot
      exit 6
  else
    #clean out .desktop files from device so there's only one from our app (ugh)
    # FIXME: derive the desktop file name or some other way but this works :S
    # This shouldn't be needed anymore as we delete the click apps during provisioning
    adb -s $DEVICEID shell rm /home/phablet/.local/share/applications/*.desktop
    echo $(date +%Y-%m-%d-%H%M%S) "Installing $FILENAME"
    adb -s $DEVICEID shell pkcon -p -y -v install-local --allow-untrusted $TARGET/$FILENAME | perl -pe 's/\x1b\[[0-9;]*[mG]//g' | tee -a $RESULTSDIR/install.txt
    grep "failed to install" $RESULTSDIR/install.txt
    if [ "$?" == "0" ]; then
      # Package failed to install for some reason (wrong arch, missing framework?)
      echo $(date +%Y-%m-%d-%H%M%S) "$FILENAME failed to install"
      exit 7
    else
      # Get desktop file name
      GETDESKTOP="adb -s $DEVICEID shell ls -tr $TARGET/.local/share/applications/*.desktop | tail -n 1 | tr -d '\r' | tr -d '\n'"
      DESKTOP=$($GETDESKTOP)
      # Check if the .desktop file has an Exec line, if not, it's probably a scope and we can't run it
      EXECLINE=$(adb -s $DEVICEID shell grep ^Exec $DESKTOP | tr -d '\n')
      # Suppress powerd
      adb -s $DEVICEID shell sudo stop powerd
      # Turn the display screen on
      adb -s $DEVICEID shell powerd-cli display on &
      # Prevent the screen from locking
      adb -s $DEVICEID shell gsettings set com.ubuntu.touch.system activity-timeout 0
      # Unlock the screen
      adb -s $DEVICEID shell gdbus call --session --dest com.canonical.UnityGreeter --object-path / --method com.canonical.UnityGreeter.HideGreeter
      # Refresh app scope
      adb -s $DEVICEID shell dbus-send /com/canonical/unity/scopes com.canonical.unity.scopes.InvalidateResults string:clickscope
      pause 1
      # Trim desktop filename
      LAUNCH=$(basename $DESKTOP | sed 's/.desktop//')
      # shut off the network
      adb -s $DEVICEID shell nmcli n off
      # Screenshot the app scope (should be on screen by default) so the dev sees their icon/text
      screen_grab 0
      if [ "$EXECLINE" == "" ]; then
        # Add a delay of 5 seconds after install before launching scopes as
        # the app scope refreshes and we capture that in screenshots
        pause 5
        echo $(date +%Y-%m-%d-%H%M%S) Launching a scope $LAUNCH
        adb -s $DEVICEID shell "dbus-send --print-reply --dest=com.canonical.URLDispatcher /com/canonical/URLDispatcher com.canonical.URLDispatcher.DispatchURL string:'scope://$LAUNCH' string:''"
        APPTYPE="scope" 2>&1 | tee -a $RESULTSDIR/$LAUNCH-$DEVICE_TYPE-launch.txt
        # Add delay after starting otherwise we get a bouncer on screen which
        # makes it hard to diff screenshots if not all have same bouncer
        pause 5
      else
        # We did find an Exec line, so chances are this is an app (not scope)
        adb -s $DEVICEID shell "ubuntu-app-launch $LAUNCH" 2>&1 | tee -a $RESULTSDIR/$LAUNCH-$DEVICE_TYPE-launch.txt
        APPTYPE="app"
      fi # [ "$EXECLINE" == "" ]; then
      # Get three more screenshots
      for counter in 1 2 3
      do
        # Check if app is still running, if so, grab a screenshot
        if [ "$APPTYPE" == "app" ]
        then
          adb -s $DEVICEID shell "ubuntu-app-list | grep $LAUNCH"
        else
          echo "Scope, so this is just to ensure a 0 rc"
        fi
        if [ "$?" == "0" ]
        then
          # Unnecessary
          #echo $(date +%Y-%m-%d-%H%M%S) "Application running, taking screenshot" | tee -a >> $RESULTSDIR/launch.txt
          screen_grab $counter
        else
          # If the app is no longer running, it probably died, no point taking
          # a screenshot at this point
          echo $(date +%Y-%m-%d-%H%M%S) "Application no longer running, probably died" | tee -a >> $RESULTSDIR/launch.txt
        fi
        if [ "$counter" -lt "3" ]
        then
          pause 5
        fi
      done
      # stop app
      if [ "$APPTYPE" == "app" ]
      then
        # Stop the app
        adb -s $DEVICEID shell "ubuntu-app-stop $LAUNCH"
      else
        # Switch away from scope
        adb -s $DEVICEID shell "dbus-send --print-reply --dest=com.canonical.URLDispatcher /com/canonical/URLDispatcher com.canonical.URLDispatcher.DispatchURL string:'scope://com.canonical.scopes.click' string:''"
      fi
      # Get logs
      get_logs
      # Remove any click packages remaining (clean up after our app)
      adb -s $DEVICEID shell click list |  cut -f1 -d"	" | while read line
      do
        REMOVECLICK="adb -s $DEVICEID shell sudo click unregister $line"
        echo "$REMOVECLICK"
        $REMOVECLICK
      done
      # Refresh app scope
      adb -s $DEVICEID shell dbus-send /com/canonical/unity/scopes com.canonical.unity.scopes.InvalidateResults string:clickscope

      # Clean up app data and logs created by the app
      CONFDIR=$(echo $LAUNCH | awk -F '_' '{ print $1 }')
      echo $(date +%Y-%m-%d-%H%M%S) "Deleting .local share dir"
      adb -s $DEVICEID rm -rf $TARGET/.local/share/$CONFDIR*
      echo $(date +%Y-%m-%d-%H%M%S) "Deleting .config dir"
      adb -s $DEVICEID rm -rf $TARGET/.config/$CONFDIR*
      echo $(date +%Y-%m-%d-%H%M%S) "Deleting QML Cache"
      adb -s $DEVICEID rm -rf $TARGET/.cache/QML/Apps/$CONFDIR*
      echo $(date +%Y-%m-%d-%H%M%S) "Deleting application log"
      adb -s $DEVICEID shell rm $TARGET/.cache/upstart/application-click-$LAUNCH.log
      echo $(date +%Y-%m-%d-%H%M%S) "Clearing kernel ring buffer"
      adb -s $DEVICEID sudo dmesg -C
      echo $(date +%Y-%m-%d-%H%M%S) "Forcing logrotate"
      adb -s $DEVICEID start logrotate

      # Restore state of device so display goes off between tests (if there's time)
      # Turn on screen time out of 1 min
      adb -s $DEVICEID shell gsettings set com.ubuntu.touch.system activity-timeout 60
      # Find the powerd-cli process we started from above
      POWERDPID=$(adb -s $DEVICEID shell pidof powerd-cli | tr -d '\r')
      # Kill it (there's probably a better way)
      adb -s $DEVICEID shell kill $POWERDPID
      # Restart power daemon
      adb -s $DEVICEID shell sudo start powerd
    fi # [ "$?" != "0" ]; then (pkcon install)
    # Delete the click file we pushed to the device
    adb -s $DEVICEID shell rm $TARGET/*.click
  fi  # [ "$?" != "0" ]; then (click review)
fi # [ "$?" != "0" ]; then (push)
# Delete any empty files (i.e. logs) so we don't email zero size files
find $RESULTSDIR -size  0 -print0 |xargs -0 rm
rm -rf $TMPDIR

# De-duplicate screenshot 2 and 3 (as they may be the same) to save space
# and email bandwidth
dedupe $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-2.png $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-3.png
dedupe $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-1.png $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-2.png
dedupe $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-0.png $RESULTSDIR/$LAUNCH-$FRIENDLYNAME-1.png

echo $(date +%Y-%m-%d-%H%M%S) "Runtest exit normally"
