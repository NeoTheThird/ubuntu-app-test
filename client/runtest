#!/bin/bash
# Get click and test it
# $1 is click url
# $2 is device serial number
# e.g. ./runtest /click/20151126103906-PLBRWIBL9X 0050aba613958223 mako portait

CLICK_URL=$1
DEVICEID=$2
DEVICE_TYPE=$3
ORIENTATION=$4
RESULTSDIR=$5
TMPDIR=$(mktemp -d)
TARGETUSER="phablet"
TARGET="/home/$TARGETUSER"
HERE=$(pwd)
SERVERHOST="http://marvin.popey.com"

function pause {
    echo "Waiting $1"
    sleep $1
}

function screen_grab {
  case "$DEVICE_TYPE" in
    flo)
        SIZE=1200x1920
        ;;
    maguro)
        SIZE=720x1280
        ;;
    mako)
        SIZE=768x1280
        ;;
    manta)
        SIZE=1600x2560
        ;;
    k95v2)
        SIZE=1152x1920
        ;;
    arale)
        SIZE=1152x1920
        ;;
    grouper)
        SIZE=800x1280
        ;;
    *)
  esac
  CONVERTOPTS="$CONVERTOPTS"
  adb -s $DEVICEID shell "kill -SIGSTOP \$(pidof unity8)"
  adb -s $DEVICEID shell mirscreencast -m /var/run/mir_socket  -n1
  adb -s $DEVICEID shell "kill -SIGCONT \$(pidof unity8)"
  SILLYFILE=`/usr/bin/adb $ADBOPTS shell ls -1 /tmp/mir_screencast*|tr -d '\r'`
  adb -s $DEVICEID pull "$SILLYFILE" $RESULTSDIR/screenshot.rgba
  convert -depth 8 -size $SIZE $RESULTSDIR/screenshot.rgba $RESULTSDIR/screenshot$1.png
  rm $RESULTSDIR/screenshot.rgba
}

function get_logs {
  # Get data about the version of ubuntu on the device
  adb -s $DEVICEID shell "system-image-cli --info" > $RESULTSDIR/device-version.txt
  # Get the application log
  adb -s $DEVICEID pull $TARGET/.cache/upstart/application-click-$LAUNCH.log $RESULTSDIR/application-log.txt
  # Get kernel output associated with the app
  adb -s $DEVICEID shell "sudo dmesg -T | grep $LAUNCH" > $RESULTSDIR/dmesg.txt
}

echo $CLICK_URL
echo $DEVICEID

mkdir $RESULTSDIR

wget -P $TMPDIR --content-disposition $SERVERHOST$CLICK_URL

FILE=$(ls $TMPDIR/*.click)
FILENAME=$(basename $FILE)
DESKTOPFILE=$(echo $FILENAME | tr '-' '_')

click-review $FILE | tee -a $RESULTSDIR/click-review.txt

if [ ${PIPESTATUS[0]} -ne 0 ]; then
  echo "Click review of $FILE failed"
else
  echo $(date +%Y%m%d%H%M%S) Pushing $FILE to $TARGET
  # Send the click package to the device
  adb -s $DEVICEID push $FILE $TARGET
  if [ "$?" != "0" ]; then
      echo `date` Push failed
  else
    #clean out .desktop files from device so there's only one from our app (ugh)
    # FIXME: derive the desktop file name or some other way but this works :S
    # This shouldn't be needed anymore as we delete the click apps during provisioning
    adb -s $DEVICEID shell rm /home/phablet/.local/share/applications/*.desktop
    echo `date` Installing $FILENAME
    adb -s $DEVICEID shell pkcon -p -y -v install-local --allow-untrusted $TARGET/$FILENAME | perl -pe 's/\x1b\[[0-9;]*[mG]//g' | tee -a $RESULTSDIR/install.txt
    # Suppress powerd
    adb -s $DEVICEID sudo stop powerd
    # Turn the display screen on
    adb -s $DEVICEID powerd-cli display on &
    # Prevent the screen from locking
    adb -s $DEVICEID gsettings set com.ubuntu.touch.system activity-timeout 0
    # Unlock the screen
    adb -s $DEVICEID gdbus call --session --dest com.canonical.UnityGreeter --object-path / --method com.canonical.UnityGreeter.HideGreeter
    # Refresh app scope
    adb -s $DEVICEID shell dbus-send /com/canonical/unity/scopes com.canonical.unity.scopes.InvalidateResults string:clickscope
    pause 5
    # Screenshot the app scope (should be on screen by default) so the dev sees their icon/text
    screen_grab 0
  fi
  # Get desktop file name
  GETDESKTOP="adb -s $DEVICEID shell ls -tr $TARGET/.local/share/applications/*.desktop | tail -n 1 | tr -d '\r' | tr -d '\n'"
  DESKTOP=$($GETDESKTOP)
  # Trim desktop filename
  LAUNCH=$(basename $DESKTOP | sed 's/.desktop//')
  # shut off the network
  adb -s $DEVICEID shell nmcli n off
  #adb -s $DEVICEID shell sudo -u phablet -i start application APP_ID=$LAUNCH 2>&1 | tee -a $RESULTSDIR/launch.log
  adb -s $DEVICEID shell "ubuntu-app-launch $LAUNCH" 2>&1 | tee -a $RESULTSDIR/launch.txt
  # Get initial screenshot
  screen_grab 1
  pause 5
  screen_grab 2
  pause 5
  screen_grab 3
  # stop app
  adb -s $DEVICEID shell "ubuntu-app-stop $LAUNCH"
  # Get logs
  get_logs
fi
# Delete any empty files (i.e. logs) so we don't email zero size files
find $RESULTSDIR -size  0 -print0 |xargs -0 rm
rm -rf $TMPDIR
